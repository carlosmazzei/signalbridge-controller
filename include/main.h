#ifndef _MAIN_H_
#define _MAIN_H_

#ifdef __GNUC__
#define CALLBACK_FUNCTION_PROTO __attribute__((unused))
#else
#define CALLBACK_FUNCTION_PROTO
#endif

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdint.h>

/* Scheduler include files. */
#include "FreeRTOS.h"
#include "queue.h"
#include "hooks.h"
#include "task.h"
#include "semphr.h"
#include "pico/stdlib.h"
#include "hardware/watchdog.h"

#include "cobs.h"
#include "stdA320.h"
#include "outputs.h"
#include "inputs.h"
#include "data_event.h"

#include "bsp/board.h"
#include "tusb.h"

/**
 * Size of the cobs encoded reception queue
 */
#define ENCODED_QUEUE_SIZE 100

/**
 * Maximum size of the cobs encoded reception buffer
 */
#define MAX_ENCODED_BUFFER_SIZE 12 // n/254 + 1 + Packet Marker

/**
 * Data buffer size
 */
#define DATA_BUFFER_SIZE 10

/**
 * Data event queue size to store outbound data generated by inputs
 */
#define DATA_EVENT_QUEUE_SIZE 20

/**
 * Packet Marker of the COBS encoded data
 */
#define PACKET_MARKER 0x00

/** 
 * Panel ID 
 */
#define PANEL_ID 0x01

/**
 * Task priorities
 */
#define mainPROCESS_QUEUE_TASK_PRIORITY (tskIDLE_PRIORITY + 1)
#define mainCDC_TASK_PRIORITY (tskIDLE_PRIORITY + 2)

/**
 * Stack sizes 
*/
#define CDC_STACK_SIZE (2 * configMINIMAL_STACK_SIZE)
#define UART_EVENT_STACK_SIZE (2 * configMINIMAL_STACK_SIZE)
#define DECODE_RECEPTION_STACK_SIZE (2 * configMINIMAL_STACK_SIZE)
#define PROCESS_OUTBOUND_STACK_SIZE (2 * configMINIMAL_STACK_SIZE)
#define ADC_READ_STACK_SIZE (2 * configMINIMAL_STACK_SIZE)
#define KEYPAD_STACK_SIZE (2 * configMINIMAL_STACK_SIZE)
#define ENCODER_READ_STACK_SIZE (2 * configMINIMAL_STACK_SIZE)

/**
 * Enum of all counters 
 */
typedef enum error_counter_enum_t
{
    QUEUE_SEND_ERROR,
    QUEUE_RECEIVE_ERROR,
    DISPLAY_OUT_ERROR,
    LED_OUT_ERROR,
    WATCHDOG_ERROR,
    MSG_MALFORMED_ERROR,
    RECEIVE_BUFFER_OVERFLOW_ERROR,
    NUM_ERROR_COUNTERS
} error_counter_enum_t;

/**
 * Structure to hold errors counter
 */
typedef struct error_counters_t
{
    uint16_t counters[NUM_ERROR_COUNTERS];
    bool error_state;
} error_counters_t;

/** 
 * Structure to hold task handles
 */
typedef struct task_handles_t
{
    TaskHandle_t cdc_task_handle;
    TaskHandle_t uart_event_task_handle;
    TaskHandle_t decode_reception_task_handle;
    TaskHandle_t process_outbound_task_handle;
    TaskHandle_t adc_read_task_handle;
    TaskHandle_t keypad_task_handle;
    TaskHandle_t encoder_read_task_handle;
} task_handles_t;

/** 
 * Structure to hold free heap size
 */
typedef struct task_high_watermark_t
{
    uint8_t cdc_task_high_watermark;
    uint8_t uart_event_task_high_watermark;
    uint8_t decode_reception_task_high_watermark;
    uint8_t process_outbound_task_high_watermark;
    uint8_t adc_read_task_high_watermark;
    uint8_t keypad_task_high_watermark;
    uint8_t encoder_read_task_high_watermark;
} task_high_watermark_t;

/** 
 * Structure to hold task handle and high watermark 
 */
typedef struct task_props_t
{
    TaskHandle_t task_handle;
    uint8_t high_watermark;
} task_props_t;

/**
 * Enum of all tasks created
 */
typedef enum task_enum_t
{
    CDC_TASK,
    UART_EVENT_TASK,
    DECODE_RECEPTION_TASK,
    PROCESS_OUTBOUND_TASK,
    ADC_READ_TASK,
    KEYPAD_TASK,
    ENCODER_READ_TASK,
    NUM_TASKS
} task_enum_t;

/**
 * Function prototypes
 */
static void uart_event_task(void *pvParameters) CALLBACK_FUNCTION_PROTO;
static void decode_reception_task(void *pvParameters) CALLBACK_FUNCTION_PROTO;
static void send_data(uint16_t id, uint8_t command, const uint8_t *send_data, uint8_t length);
static void process_inbound_data(const uint8_t *rx_buffer, size_t length);
static void process_outbound_task(void *pvParameters) CALLBACK_FUNCTION_PROTO;

void send_heap_status();
static inline void send_status(uint8_t index);
static inline void enter_error_state();
static inline void clean_up();

/**
 * Configure the hardware as necessary to run
 */
static inline bool setup_hardware(void);

#endif