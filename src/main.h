#ifndef _MAIN_H_
#define _MAIN_H_

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdint.h>

/* Scheduler include files. */
#include "FreeRTOS.h"
#include "queue.h"
#include "task.h"
#include "semphr.h"
#include "pico/stdlib.h"

#include "cobs.h"
#include "stdA320.h"
#include "outputs.h"
#include "inputs.h"
#include "data_event.h"

#include "bsp/board.h"
#include "tusb.h"

/**
 * Size of the cobs encoded reception queue
 */
#define ENCODED_QUEUE_SIZE 100

/**
 * Maximum size of the cobs encoded reception buffer
 */
#define MAX_ENCODED_BUFFER_SIZE 12 // n/254 + 1 + Packet Marker

/**
 * Data buffer size
 */
#define DATA_BUFFER_SIZE 10

/**
 * Data event queue size to store outbound data generated by inputs
 */
#define DATA_EVENT_QUEUE_SIZE 20

/**
 * Packet Marker of the COBS encoded data
 */
#define PACKET_MARKER 0x00

/**
 * Task priorities
 */
#define mainPROCESS_QUEUE_TASK_PRIORITY (tskIDLE_PRIORITY + 1)
#define mainCDC_TASK_PRIORITY (tskIDLE_PRIORITY + 2)

/**
 * Structure to hold errors counter
 */
typedef struct error_counters_t
{
    uint16_t queue_send_error;
    uint16_t queue_receive_error;
    uint16_t display_out_error;
    uint16_t led_out_error;
    bool error_state;
} error_counters_t;

/** Structure to hold task handles
 *
 */
typedef struct task_handles_t
{
    TaskHandle_t cdc_task_handle;
    TaskHandle_t uart_event_task_handle;
    TaskHandle_t decode_reception_task_handle;
    TaskHandle_t process_outbound_task_handle;
    TaskHandle_t adc_read_task_handle;
    TaskHandle_t keypad_task_handle;
    TaskHandle_t encoder_read_task_handle;
} task_handles_t;

/**
 * Function prototypes
 */
static void uart_event_task(void *pvParameters);
static void decode_reception_task(void *pvParameters);
static void send_data(uint16_t id, uint8_t command, uint8_t *send_data, uint8_t length);
static void process_inbound_data(uint8_t *rx_buffer);
static void process_outbound_task(void *pvParameters);
static inline void send_status();
static inline void enter_error_state();

/**
 * Configure the hardware as necessary to run this demo.
 */
static bool prvSetupHardware(void);

#endif