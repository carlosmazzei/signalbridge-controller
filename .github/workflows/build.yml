name: "Build"

on:
  push:
    paths-ignore: # Ignora mudanças no Dockerfile para não acionar o CI duas vezes
        - '.devcontainer/**'
  release:
    types: [published]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  PICO_PLATFORM: rp2040
  PICO_BOARD: pico

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    container:
      # Get the most recent devcontainer image from the GitHub Container Registry
      # This image is built from the .devcontainer/Dockerfile in the repository
      # and pushed to the GitHub Container Registry (GHCR.io) on every commit.
      image: ghcr.io/${{ github.repository }}/devcontainer-embedded:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }} # Para puxar de registro privado (GHCR.io)

    steps:
      # Clean workspace before starting
      - name: Clean workspace
        run: |
          echo "Cleaning up previous run"
          rm -rf "${{ github.workspace }}"
          mkdir -p "${{ github.workspace }}"

      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Setup submodules
      - name: Setup submodules
        run: |
          echo "Setting up submodules"
          git submodule update --init --recursive

      # Install build tools
      - name: Install build tools
        run: |
          echo "Installing building tools"
          sudo apt update
          sudo apt install -y cmake doxygen python3 build-essential gcc-arm-none-eabi libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib
          
      # Create build environment
      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{github.workspace}}/build
    
      # Set up the environment variables for the build
      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
    
      # Build the project
      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE --target all --parallel $(nproc)

      # Archive doxygen documentation
      - name: Archive Doxygen Documentation
        run: |
          echo "Archiving Doxygen documentation"  
          tar -czf ${{github.workspace}}/build/src/doc.tar.gz -C ${{github.workspace}}/build/docs/ doc_doxygen

      # Store build artifacts
      - name: Store Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pico-build
          path: |
            build/src/*.uf2
            build/src/*.elf
            build/src/doc.tar.gz
          retention-days: 10

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    # Download artifacts from previous build
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: pico-build
        path: artifacts
    
    # Upload to release
    - name: Upload Release Assets
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/*.uf2
          artifacts/*.elf
          artifacts/doc.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}