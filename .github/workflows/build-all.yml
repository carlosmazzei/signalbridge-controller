# .github/workflows/build-all.yml
name: "Build All"

on:
  push:
    paths:
      - 'src/**'
      - 'include/**'
      - 'test/**'
      - '.gitmodules'
      - 'CMakeLists.txt'
      - '*.cmake'
      - 'CMakePresets.json'
      - '.devcontainer/**'
  release:
    types: [published]
  workflow_dispatch:

env:
  PICO_PLATFORM: rp2040
  PICO_BOARD: pico
  PICO_SDK_PATH: ./lib/pico-sdk
  FREERTOS_KERNEL_PATH: ./lib/FreeRTOS-Kernel
  PICO_TOOLCHAIN_PATH: /usr/bin

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      devcontainer-changed: ${{ steps.changes.outputs.devcontainer }}
      firmware-changed: ${{ steps.changes.outputs.firmware }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            devcontainer:
              - '.devcontainer/**'
            firmware:
              - 'src/**'
              - 'include/**'
              - 'test/**'
              - '.gitmodules'
              - 'CMakeLists.txt'
              - '*.cmake'
              - 'CMakePresets.json'

  build-devcontainer:
    name: Build DevContainer
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.devcontainer-changed == 'true' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.image_tags.outputs.tag_sha }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Define tags
        id: image_tags
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}/devcontainer-embedded-debian
          echo "tag_latest=${IMAGE_NAME}:latest" >> $GITHUB_OUTPUT
          echo "tag_debian12=${IMAGE_NAME}:debian-12" >> $GITHUB_OUTPUT
          echo "tag_sha=${IMAGE_NAME}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build and push DevContainer image
        uses: docker/build-push-action@v6
        with:
          context: .devcontainer
          file: .devcontainer/Dockerfile
          push: true
          tags: |
            ${{ steps.image_tags.outputs.tag_latest }}
            ${{ steps.image_tags.outputs.tag_debian12 }}
            ${{ steps.image_tags.outputs.tag_sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-firmware:
    name: Build Firmware
    runs-on: ubuntu-latest
    needs: [detect-changes, build-devcontainer]
    # Runs if firmware changed OR if devcontainer changed OR if it's a release OR workflow_dispatch
    if: |
      always() && 
      (needs.detect-changes.outputs.firmware-changed == 'true' || 
       needs.detect-changes.outputs.devcontainer-changed == 'true' || 
       github.event_name == 'release' || 
       github.event_name == 'workflow_dispatch') &&
      (needs.build-devcontainer.result == 'success' || needs.build-devcontainer.result == 'skipped')
    
    container:
      image: ${{ needs.build-devcontainer.outputs.image-tag || format('ghcr.io/{0}/devcontainer-embedded-debian:latest', github.repository) }}
      options: --user=root
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      # Checkout the repository with submodules
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: 'recursive'

      # Verify toolchain installation
      - name: Verify installed toolchain version
        run: arm-none-eabi-gcc --version

      # Comprehensive debugging of paths and directory structure
      - name: Debug - Show directory structure and paths
        run: |
          echo "==================== DEBUGGING PATHS ===================="
          echo "Current working directory: $(pwd)"
          echo ""
          echo "=== Environment Variables ==="
          echo "BUILD_TYPE: $BUILD_TYPE"
          echo "PICO_PLATFORM: $PICO_PLATFORM"
          echo "PICO_BOARD: $PICO_BOARD"
          echo "PICO_SDK_PATH: $PICO_SDK_PATH"
          echo "FREERTOS_KERNEL_PATH: $FREERTOS_KERNEL_PATH"
          echo "PICO_TOOLCHAIN_PATH: $PICO_TOOLCHAIN_PATH"
          echo ""
          echo "=== Root Directory Contents ==="
          ls -la
          echo ""
          echo "=== Lib Directory ==="
          if [ -d "lib" ]; then
            ls -la lib/
          else
            echo "❌ lib directory does not exist"
          fi
          echo ""
          echo "=== Verifying SDK and FreeRTOS paths ==="
          if [ -d "$PICO_SDK_PATH" ]; then
            echo "✅ PICO_SDK_PATH exists: $PICO_SDK_PATH"
            echo "Contents:"
            ls -la "$PICO_SDK_PATH" | head -5
          else
            echo "❌ PICO_SDK_PATH does not exist: $PICO_SDK_PATH"
          fi
          echo ""
          if [ -d "$FREERTOS_KERNEL_PATH" ]; then
            echo "✅ FREERTOS_KERNEL_PATH exists: $FREERTOS_KERNEL_PATH"
            echo "Contents:"
            ls -la "$FREERTOS_KERNEL_PATH" | head -5
          else
            echo "❌ FREERTOS_KERNEL_PATH does not exist: $FREERTOS_KERNEL_PATH"
          fi
          echo ""
          echo "=== CMake files in project ==="
          find . -name "*.cmake" -type f 2>/dev/null | head -10
          echo ""
          echo "=== Looking for FreeRTOS import files ==="
          find . -name "*FreeRTOS*" -name "*.cmake" -type f 2>/dev/null
          echo ""
          echo "=== CMakeLists.txt files ==="
          find . -name "CMakeLists.txt" -type f 2>/dev/null
          echo "=========================================================="

      # Configure project using CMake presets
      - name: Configure CMake
        run: |
          echo "==================== CMAKE CONFIGURATION ===================="
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo ""
          echo "Lib directory:"
          ls -la lib/
          echo ""
          echo "=== Paths relative to project root ==="
          echo "PICO_SDK_PATH: ${{ env.PICO_SDK_PATH }}"
          echo "FREERTOS_KERNEL_PATH: ${{ env.FREERTOS_KERNEL_PATH }}"
          echo ""
          echo "=== Verifying paths exist ==="
          if [ -d "${{ env.PICO_SDK_PATH }}" ]; then
            echo "✅ PICO_SDK_PATH exists: ${{ env.PICO_SDK_PATH }}"
          else
            echo "❌ PICO_SDK_PATH does not exist: ${{ env.PICO_SDK_PATH }}"
          fi
          if [ -d "${{ env.FREERTOS_KERNEL_PATH }}" ]; then
            echo "✅ FREERTOS_KERNEL_PATH exists: ${{ env.FREERTOS_KERNEL_PATH }}"
          else
            echo "❌ FREERTOS_KERNEL_PATH does not exist: ${{ env.FREERTOS_KERNEL_PATH }}"
          fi
          echo ""
          echo "=== Running CMake with preset ==="
          cmake --preset pico-release --debug-output
          echo "=========================================================="

      # Build the project using presets
      - name: Build
        run: |
          echo "==================== BUILDING PROJECT ===================="
          echo "Starting build process..."
          cmake --build --preset pico-release --verbose
          echo ""
          echo "=== Build completed - checking outputs ==="
          find build-release -name "*.uf2" -o -name "*.elf" -o -name "*.bin" -o -name "*.hex" 2>/dev/null
          echo "=========================================================="

      # Archive documentation if it exists
      - name: Archive Doxygen Documentation
        run: |
          echo "==================== DOCUMENTATION ===================="
          if [ -d "build-release/docs/doc_doxygen" ]; then
            echo "✅ Doxygen documentation found"
            echo "Creating documentation archive..."
            tar -czf build-release/src/doc.tar.gz -C build-release/docs/ doc_doxygen
            echo "Documentation archived successfully"
          else
            echo "ℹ️  Doxygen documentation not found, skipping archive"
            echo "Available directories in build:"
            find build-release -type d -name "*doc*" 2>/dev/null || echo "No documentation directories found"
          fi
          echo "=========================================================="

      # Debug artifacts before upload
      - name: Debug - Show artifacts
        run: |
          echo "==================== ARTIFACTS ===================="
          echo "=== Looking for build artifacts ==="
          find build-release -name "*.uf2" -o -name "*.elf" -o -name "*.bin" -o -name "*.hex" 2>/dev/null
          echo ""
          echo "=== Build directory structure ==="
          find build-release -type f | head -20
          echo "=========================================================="

      # Store build artifacts
      - name: Store Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pico-build
          path: |
            build-release/src/*.uf2
            build-release/src/*.elf
            build-release/src/doc.tar.gz
          retention-days: 10

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: [detect-changes, build-devcontainer]
    if: |
      (needs.detect-changes.outputs.firmware-changed == 'true' ||
       needs.detect-changes.outputs.devcontainer-changed == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      (needs.build-devcontainer.result == 'success' || needs.build-devcontainer.result == 'skipped')
    container:
      image: ${{ needs.build-devcontainer.outputs.image-tag || format('ghcr.io/{0}/devcontainer-embedded-debian:latest', github.repository) }}
      options: --user=root
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Configure tests
        run: cmake --preset host-tests

      - name: Build tests
        run: cmake --build --preset host-tests

      - name: Run tests
        run: ctest --preset host-tests

      - name: Generate coverage
        run: cmake --build --preset host-tests-coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: build-tests/coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: build-tests/coverage.info
          flags: unittests

  # Release job (only runs on releases)
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build-firmware
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      # Download artifacts from build job
      - name: Download Build Artifacts
        uses: actions/download-artifact@v5
        with:
          name: pico-build
          path: artifacts

      # Debug downloaded artifacts
      - name: Debug - Show downloaded artifacts
        run: |
          echo "=== Downloaded artifacts ==="
          find artifacts -type f
          ls -la artifacts/

      # Upload to GitHub release
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.uf2
            artifacts/**/*.elf
            artifacts/**/*.bin
            artifacts/**/*.hex
            artifacts/doc.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}